name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgmp-dev aspcud

    - uses: actions/checkout@v4

    - name: Cache OPAM
      uses: actions/cache@v4
      with:
        path: ~/.opam
        key: ${{ runner.os }}-opam-${{ hashFiles('**/_CoqProject') }}-v12
        restore-keys: |
          ${{ runner.os }}-opam-

    - name: Set up OCaml and OPAM
      uses: ocaml/setup-ocaml@v3
      with:
        ocaml-compiler: '4.13.1'
        opam-repositories: |
          default: https://opam.ocaml.org
          coq-released: https://coq.inria.fr/opam/released

    - name: Create Clean OPAM Switch
      run: |
        set -exo pipefail
        SWITCH_NAME="collatz-proof"
        OCAML_VERSION="ocaml-base-compiler.4.13.1"

        echo "Removing existing switch..."
        opam switch remove "${SWITCH_NAME}" --yes || true

        echo "Creating OPAM switch..."
        opam switch create "${SWITCH_NAME}" "${OCAML_VERSION}" --root ~/.opam
        if [ $? -ne 0 ]; then
          echo "Switch creation failed"
          exit 1
        fi

        echo "Activating environment..."
        eval $(opam env --switch="${SWITCH_NAME}" --set-switch)

        echo "Adding OPAM repository..."
        opam repository add coq-released https://coq.inria.fr/opam/released --all-switches
        if [ $? -ne 0 ]; then
          echo "Repository add failed"
          exit 1
        fi

        echo "Updating OPAM..."
        opam update
        if [ $? -ne 0 ]; then
          echo "OPAM update failed"
          exit 1
        fi

        echo "Checking OPAM configuration..."
        touch opam_config.log
        opam config report | stdbuf -oL tee -a opam_config.log
        echo "Listing available Coq versions..."
        touch coq_versions.log
        opam list --all-versions coq | stdbuf -oL tee -a coq_versions.log
        echo "Listing repository state..."
        touch repo_list.log
        opam repo list | stdbuf -oL tee -a repo_list.log
        echo "Verifying log files..."
        ls -l *.log
        cat opam_config.log coq_versions.log repo_list.log

    - name: Pin Coq Version (Alternative 1 - Simplified Pinning)
      timeout-minutes: 10
      run: |
        set -exo pipefail
        echo "Pinning Coq 8.16.1..."
        touch pin_coq.log
        set +o pipefail
        opam pin add coq 8.16.1 -y --verbose --show > pin_coq.log 2>&1
        PIN_EXIT_CODE=$?
        set -o pipefail
        stdbuf -oL tee -a pin_coq.log < pin_coq.log
        if [ $PIN_EXIT_CODE -ne 0 ]; then
          echo "Pinning failed with exit code $PIN_EXIT_CODE"
          cat pin_coq.log
          opam list --all-versions coq
          exit 1
        fi
        echo "Verifying pin_coq.log..."
        ls -l pin_coq.log
        cat pin_coq.log
        echo "Checking pinned package..."
        opam show coq | stdbuf -oL tee -a pin_coq.log
        echo "Updating environment..."
        eval $(opam env --switch=collatz-proof --set-switch)
        echo "Checking PATH..."
        echo $PATH
        echo "Verifying OPAM environment..."
        opam env

    - name: Upload Logs After Pinning
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: opam-logs-after-pinning
        path: |
          *.log
        retention-days: 7

    - name: Install Coq (Alternative 1 - Simplified Pinning)
      run: |
        set -exo pipefail
        echo "Showing planned Coq installation actions..."
        touch install_coq.log
        opam install coq.8.16.1 --show-actions | stdbuf -oL tee -a install_coq.log
        echo "Installing Coq 8.16.1..."
        opam install coq.8.16.1 -y --verbose > install_coq.log 2>&1
        INSTALL_EXIT_CODE=$?
        stdbuf -oL tee -a install_coq.log < install_coq.log
        if [ $INSTALL_EXIT_CODE -ne 0 ]; then
          echo "Coq 8.16.1 installation failed with exit code $INSTALL_EXIT_CODE"
          cat install_coq.log
          opam list --all-versions coq
          exit 1
        fi
        echo "Verifying install_coq.log..."
        ls -l install_coq.log
        cat install_coq.log
        echo "Checking Coq package info..."
        opam info coq | stdbuf -oL tee -a install_coq.log
        echo "Listing OPAM bin directory..."
        ls -l ~/.opam/collatz-proof/bin || echo "Bin directory empty or missing"
        echo "Searching for coqtop..."
        find ~/.opam -name coqtop || echo "coqtop not found in ~/.opam"
        echo "Checking installed packages..."
        opam list --installed | stdbuf -oL tee -a installed_packages.log
        echo "Updating environment..."
        eval $(opam env --switch=collatz-proof --set-switch)
        echo "Checking PATH..."
        echo $PATH
        echo "Checking coqtop location..."
        which coqtop || { echo "coqtop not found in PATH"; exit 1; }
        echo "Verifying coqtop..."
        touch coq_version.log
        coqtop --version | stdbuf -oL tee -a coq_version.log
        echo "Verifying OPAM environment..."
        opam env

    - name: Verify Coq Installation
      run: |
        set -exo pipefail
        echo "Checking Coq version..."
        eval $(opam env --switch=collatz-proof --set-switch)
        echo "PATH contents..."
        echo $PATH
        echo "Listing OPAM bin directory..."
        ls -l ~/.opam/collatz-proof/bin || echo "Bin directory empty or missing"
        echo "Searching for coqtop..."
        find ~/.opam -name coqtop || echo "coqtop not found in ~/.opam"
        echo "Checking coqtop location..."
        which coqtop || { echo "coqtop not found in PATH"; exit 1; }
        touch coq_version.log
        coqtop --version | stdbuf -oL tee -a coq_version.log
        echo "Listing installed packages..."
        touch installed_packages.log
        opam list --installed | stdbuf -oL tee -a installed_packages.log
        EXPECTED_VERSION=$(grep "coq.*8.16.1" installed_packages.log || echo "")
        if [ -z "$EXPECTED_VERSION" ]; then
          echo "Expected Coq version 8.16.1 not found"
          opam list --all-versions coq
          exit 1
        fi
        echo "Coq installation verified."

    - name: Install Dependencies
      run: |
        set -exo pipefail
        echo "Installing coq-elpi..."
        eval $(opam env --switch=collatz-proof --set-switch)
        touch install_elpi.log
        opam install -y --verbose coq-elpi.2.5.2 > install_elpi.log 2>&1
        ELPI_EXIT_CODE=$?
        stdbuf -oL tee -a install_elpi.log < install_elpi.log
        if [ $ELPI_EXIT_CODE -ne 0 ]; then
          echo "coq-elpi installation failed with exit code $ELPI_EXIT_CODE"
          cat install_elpi.log
          exit 1
        fi
        echo "Installing coq-mathcomp-ssreflect..."
        touch install_mathcomp.log
        opam install -y --verbose coq-mathcomp-ssreflect.2.4.0 > install_mathcomp.log 2>&1
        MATHCOMP_EXIT_CODE=$?
        stdbuf -oL tee -a install_mathcomp.log < install_mathcomp.log
        if [ $MATHCOMP_EXIT_CODE -ne 0 ]; then
          echo "coq-mathcomp-ssreflect installation failed with exit code $MATHCOMP_EXIT_CODE"
          cat install_mathcomp.log
          exit 1
        fi
        echo "Updating environment..."
        eval $(opam env --switch=collatz-proof --set-switch)

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: opam-logs
        path: |
          *.log
        retention-days: 7

    - name: Compile Coq Project
      run: |
        set -exo pipefail
        echo "Activating environment..."
        eval $(opam env --switch=collatz-proof --set-switch)
        echo "Verifying OPAM environment..."
        opam env
        echo "Generating Makefile..."
        coq_makefile -f _CoqProject -o Makefile -W "-elpi.linear-variable,-elpi.missing-types"
        if [ $? -ne 0 ]; then
          echo "coq_makefile failed"
          exit 1
        fi
        echo "Inspecting Makefile..."
        cat Makefile
        echo "Compiling Coq project..."
        make -j1 V=1
        if [ $? -ne 0 ]; then
          echo "Compilation failed, showing errors:"
          cat *.v.err || true
          exit 1
        fi
        echo "Compilation complete."
